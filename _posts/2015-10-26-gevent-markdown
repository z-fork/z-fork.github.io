---
title: gevent 学习笔记 I
layout: post
tags:
- python
- gevent
---

#### introduction

先看几段代码, 能否准确说出结果.

**Q I**

~~~ python
from greenlet import greenlet


def test():
    print 12

if __name__ == '__main__':
    g = greenlet(test)
    print 34
    g.switch()  # 或者 greenlet.switch(g)
    print 56
~~~

**Q II**

~~~ python
import gevent


def test():
    print 12

if __name__ == '__main__':
    gevent.spawn(test)
    print 34
    gevent.sleep(0)
    print 56
~~~

**Q III**

~~~ python
import gevent


def test():
    print 12
    gevent.sleep(0)         --- [1]
    print 34

if __name__ == '__main__':
    g = gevent.spawn(test)
    print 56
    gevent.sleep(0)         --- [2]
    print 78
~~~

**Q IV**

如果把 `Q III` 中 [1] 处的 gevent.sleep(0) 替换成 g.parent.switch() 或者 gevent.get_hub().switch() 结果会如何? 如果把 [2] 处的跟前面一样做替换结果又如何? 如果把 [1], [2] 两处都替换呢?

**Q V**

~~~ python
import time
import gevent


def test():
    print 12
    gevent.sleep(0.1)       --- [3]
    print 34

if __name__ == '__main__':
    gevent.spawn(test)
    print 56
    gevent.sleep(0)
    print 78
    time.sleep(0.2)         --- [4]
    gevent.sleep(0)         --- [5]
~~~

#### attention

如果对以上 5 处问题对答如流, 只能奉劝大侠, "以下为学习笔记, 主要是弄清前面 5 个问题, 请留步于此, 不要浪费时间了."

#### suppose

之前未用过 gevent, 只是听过他的大名. *高效*, *协程*, *事件驱动*!!! 伴随着 gevent 到处可见的字眼. 因曾拜读过 tornado, twisted 源码, 对这些字眼并不陌生.

比如 tornado 中基于 epoll/kqueue 事件驱动的 ioloop 和 tornado.web.asynchronous & callback 的非阻塞异步, 或者基于 yield 实现的 tornado.gen.coroutine 的同步协程.

本学习笔记以"农村包围城市"的方式来写, 掺杂着"游击战"的精神.

#### key word

~~~ nohighlight
1. greenlet, libev, (watcher), hub, loop, switch, waiter
2. spawn, sleep, joinall
~~~

#### greenlet, switch

What?

它实现了一种协程机制.

How?

说到协程, 单线程的并发, 需要满足以下 2 个条件

* 执行代码片段的切换
* 代码片段执行上下文的切换.

一种实现方式是, 使用 yield 来显示中断, 那个 generate 中保存着上下文. 只要在适当的时机通过调用 `yielded.send` 就可以恢复上下文并继续执行.

`greenlet` 并不是使用这种 python 原生的方式. 而是通过提供 `switch` 方法切换**调用栈(代码片段+上下文)**来实现.

上面 **Q I** 中经历了 `main` -> `gr1` -> `main` 的切换过程.

#### hub, loop, libev

hub 是一个单例 greenlet, gevent 的 `greenlet` 有 *parent greenlet* 的概念. hub 是所有通过 `spawn` 创建 greenlet 的 parent. hub 中有 loop 是 libev 的 event loop. gevent 是通过 hub.loop 来调度, 跑起来的. 当然可以通过 `greenlet.switch(g)` 来强行执行自己调度.. 可能 loop 在主线程结束之前停止. 引发异常.

整体的执行流程的个人理解:

开始 or 运行过程中创建, 一系列调用栈(`greenlet`)， 创建时跟着创建了 `hub`(也是一个`greenlet`), 当前线程也是一个调用栈. 总共有 n = m + 1(hub) + 1(main thread) 个调用栈. 通过 `sleep` 等来触发 hub 的 loop 跑起来, loop 会通过 run_callback 注册的在这 n 个栈之间来回调 `switch` 来调度. 当 `main thread` 的栈中代码段执行完成就会正常退出(即, 代码按顺序执行完成, 此时 loop 没有被 stop, 随着程序退出才被 stop.)

**这个类似于 tornado 中 ioloop.add_callback, 把回调函数注册到 ioloop 中, 等待 ioloop 运行时, 通过 self._run_callback(callback) 来执行这个回调**


